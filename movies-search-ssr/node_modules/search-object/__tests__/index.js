const searchObject = require("../index");

const mockData = {
	version: "1",
	keywords: ["testData"],
	premierLeague: {
		teams: [
			20,
			{
				name: "Arsenal",
				playerCount: 32,
				topScorer: "Aubamayang",
				kit: {
					shirt: "red and white",
					shorts: "white",
					socks: "red and white"
				}
			},
			{
				name: "Liverpool",
				playerCount: 35,
				topScorer: "Salah",
				kit: {
					shirt: "red",
					shorts: "red",
					socks: "red"
				}
			},
			{
				name: "Manchester City",
				playerCount: 36,
				topScorer: "Aguero",
				kit: {
					shirt: "sky blue",
					shorts: "white",
					socks: "sky blue"
				}
			},
			[[[[500]]]],
			[[["Burnley"]]],
			[
				[
					[
						{
							randomString: "nested deep"
						}
					]
				]
			],
			{
				name: "Watford",
				playerCount: 31,
				topScorer: "Deeney",
				kit: {
					shirt: "yellow and black",
					shorts: "black",
					socks: "yellow"
				}
			}
		],
		ballUsed: "Nike",
		refereeCount: 18
	}
};

describe("searchObject", () => {
	it("should return false if the given string does not exist", () => {
		expect(searchObject(mockData, "green")).toBe(false);
	});

	it("should return true if the given string does exist", () => {
		expect(searchObject(mockData, "yellow")).toBe(true);
	});

	it("should return false if the given number does not exist", () => {
		expect(searchObject(mockData, 16000)).toBe(false);
	});

	it("should return true if the given number does exist", () => {
		expect(searchObject(mockData, 31)).toBe(true);
	});

	it("should return true if the given number does exist", () => {
		expect(searchObject(mockData, 35)).toBe(true);
	});

	it("should return true if the given value is present within a deeply nested array", () => {
		expect(searchObject(mockData, "nested deep")).toBe(true);
		expect(searchObject(mockData, 500)).toBe(true);
	});

	it("should throw an error if no arguments are supplied", () => {
		const mockSearchObject = jest.fn();
		mockSearchObject.mockImplementation(() => {
			throw new Error();
		});
		expect(mockSearchObject).toThrow();
	});

	it("should return true if the given string is UPPERCASED", () => {
		expect(searchObject(mockData, "LIVERPOOL")).toBe(true);
	});
});
